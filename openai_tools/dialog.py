from . import Client
from typing import Dict, Optional, Any, List
from dataclasses import dataclass


@dataclass
class Turn:
    """ Represents one turn in a chat conversation."""
    name: str
    text: str


class Chat:

    def __init__(self, client: Client, names: List[str], context: str = "", turns: Optional[List[Turn]] = None, settings: Optional[Dict[str, Any]]=None):
        """
        Creates a chat dialog similar to the OpenAI playground chat preset. Turns can be generated by open AI or
        added directly (as when a human being is responding). Turns do not have to follow any specific order.

        Args:
            client: A Client configured with an api key and a default_engine set.
            names: The names of the people in the chat. It is used to setup the stop tokens.
            context: Some optional text describing the scenario or individuals in the chat. Very helpful for the AI.
            turns: Some optional turns to show the bot the formatting and setup the rest of the conversation along with
                   the context. New turns will be appended to this list.
            settings: Overrides the default settings which are taken from the chat preset in the OpenAI playground.
        """

        self.client = client
        self.names = names
        self.context = context
        self.turns = turns if turns else []

        # Default settings from the chat preset in the OpenAI playground.
        self.settings = {
            'max_tokens': 150,
            'temperature': 0.9,
            'top_p': 1.0,
            'n': 1,
            'stream': False,
            'logprobs': 0,
            'stop': ['\n\n'] + [f'{name}:' for name in self.names]
        }

        # Override the defaults
        if settings:
            for key, val in settings.items():
                self.settings[key] = val

    def generate_turn(self, turn_name) -> Turn:
        """
        Generates a dialog turn in the chat.

        Args:
            turn_name: The individual to generate a turn for. Should already exist in the 'names' property before generating.

        Returns:
            A Turn() representing the name and their generated text.

        """
        assert turn_name in self.names

        # Start the prompt with the context.
        prompt = self.context + "\n\n"

        # Then add all the existing turns.
        for turn in self.turns:
            prompt += f"{turn.name}: {turn.text}\n\n"

        # Append the new turn to the prompt and send out a new completion request.
        prompt += f'{turn_name}:'
        self.settings['prompt'] = prompt
        response = self.client.completions(**self.settings)

        # TODO: Support the section of which choice to go with, currently assume the first.
        turn = Turn(turn_name, response['choices'][0]['text'])

        # Save the this turn so we can reuse it.
        self.turns.append(turn)

        return turn
